# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
export FZF_CTRL_T_OPTS='--preview "bat  --color=always --style=header,grid --line-range :100 {}"'

# https://github.com/junegunn/fzf/issues/846
[ -z "$ZSH_NAME" ] && [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

fvim() {
  files=$(git ls-files) &&
  selected_files=$(echo "$files" | fzf -m --preview 'head -100 {}') &&
  vim $selected_files
}

fga() {
  modified_files=$(git status --short | awk '{print $2}') &&
  selected_files=$(echo "$modified_files" | fzf -m --preview 'git diff {}') &&
  git add $selected_files
}

fbr() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

flog() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
                FZF-EOF"
}

fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

brew-maintenance() {
  echo "Starting Homebrew maintenance..."
  brew update
  brew upgrade
  brew autoremove
  brew cleanup
  echo "Done!"
}

ec2-ssh() {
  DNS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' --output text)
  [ "$DNS" == "None" ] || [ -z "$DNS" ] && echo "インスタンスが見つからないか、DNSが取得できません" && return 1
  echo "SSH接続中: ec2-user@$DNS"
  ssh ec2-user@$DNS
}

ec2-start() {
  INSTANCE_NAME=$1
  if [ -z "$INSTANCE_NAME" ]; then
    echo "インスタンス名を指定してください"
    return 1
  fi

  INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" --query 'Reservations[0].Instances[0].InstanceId' --output text)

  if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
    echo "指定したインスタンスが見つかりません: $INSTANCE_NAME"
    return 1
  fi

  STATE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].State.Name' --output text)

  if [ "$STATE" == "running" ]; then
    echo "インスタンスはすでに起動しています: $INSTANCE_NAME"
  else
    echo "インスタンスを起動中: $INSTANCE_NAME"
    aws ec2 start-instances --instance-ids "$INSTANCE_ID" > /dev/null
    echo "起動完了を待機中..."
    aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
    echo "インスタンスが起動しました: $INSTANCE_NAME"
  fi
}

ec2-stop() {
  INSTANCE_NAME=$1
  if [ -z "$INSTANCE_NAME" ]; then
    echo "インスタンス名を指定してください"
    return 1
  fi

  INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" --query 'Reservations[0].Instances[0].InstanceId' --output text)

  if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
    echo "指定したインスタンスが見つかりません: $INSTANCE_NAME"
    return 1
  fi

  STATE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].State.Name' --output text)

  if [ "$STATE" == "stopped" ]; then
    echo "インスタンスはすでに停止しています: $INSTANCE_NAME"
  else
    echo "インスタンスを停止中: $INSTANCE_NAME"
    aws ec2 stop-instances --instance-ids "$INSTANCE_ID" > /dev/null
    echo "停止完了を待機中..."
    aws ec2 wait instance-stopped --instance-ids "$INSTANCE_ID"
    echo "インスタンスが停止しました: $INSTANCE_NAME"
  fi
}

ec2-start-ssh() {
  INSTANCE_NAME=$1
  if [ -z "$INSTANCE_NAME" ]; then
    echo "インスタンス名を指定してください"
    return 1
  fi

  INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$INSTANCE_NAME" --query 'Reservations[0].Instances[0].InstanceId' --output text)

  if [ "$INSTANCE_ID" == "None" ] || [ -z "$INSTANCE_ID" ]; then
    echo "指定したインスタンスが見つかりません: $INSTANCE_NAME"
    return 1
  fi

  STATE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].State.Name' --output text)

  if [ "$STATE" == "stopped" ]; then
    echo "インスタンスが停止しています。起動中: $INSTANCE_NAME"
    aws ec2 start-instances --instance-ids "$INSTANCE_ID" > /dev/null
    echo "起動完了を待機中..."
    aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
    echo "インスタンスが起動しました: $INSTANCE_NAME"
  elif [ "$STATE" == "pending" ]; then
    echo "インスタンスが起動中です。起動完了を待機中..."
    aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
  elif [ "$STATE" == "running" ]; then
    echo "インスタンスはすでに起動しています: $INSTANCE_NAME"
  else
    echo "インスタンスの状態が不明です: $STATE"
    return 1
  fi

  DNS=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' --output text)

  if [ -z "$DNS" ] || [ "$DNS" == "None" ]; then
    echo "インスタンスのPublic DNSが取得できませんでした"
    return 1
  fi

  echo "SSH接続中: ec2-user@$DNS"
  ssh ec2-user@$DNS
}
